version: 2.1
jobs:
  test_app:
    docker:
      - image: cirrusci/flutter:latest
    steps:
      - checkout # check out the code in the project directory
      - run: echo "Starting test process" # run the `echo` command
      - run: apt-get update # Update
      - run: apt-get install git -y # install git
      - run: apt-get install gpg -y # install gpg
      - run: apt-get install gpg-agent -y # install gpg-agent
      - run: apt-get install -y git-secret # Install git-secret
      - run: echo $GPG_KEY | tr ',' '\n' > ./private_key.gpg # Create private key by environment variable
      # - run: gpg --import ./private_key.gpg # import private key
      # - run: git-secret reveal -f # reveal files
      - run: gpg --batch --import --passphrase $PASSWORD_GPG_KEY ./private_key.gpg # import private key
      - run: git-secret reveal -f -p $PASSWORD_GPG_KEY # reveal files
      - run: flutter pub get
      - run: flutter test


  build_app_android:
    docker:
      - image: cirrusci/flutter:latest
    environment:
      FASTLANE_LANE: upload_app_center
    steps:
      - checkout # check out the code in the project directory
      - run: echo "Starting build android process" # run the `echo` command
      - run: gem install fastlane # Install fastlane
      - run: 
        name: Get dependencies
        command: |
          apt-get update 
          apt-get install git -y
          apt-get install gpg -y
          apt-get install gpg-agent -y
          apt-get install git-secret -y
      - run: echo $GPG_KEY | tr ',' '\n' > ./private_key.gpg # Create private key by environment variable
      # - run: gpg --import ./private_key.gpg # import private key 
      # - run: git-secret reveal -f # reveal files
      - run: gpg --batch --import --passphrase $PASSWORD_GPG_KEY ./private_key.gpg # import private key
      - run: git-secret reveal -f -p $PASSWORD_GPG_KEY # reveal files
      - run: flutter clean
      - run: flutter pub get
      - run: flutter build apk --release --flavor prod -t lib/main.dart --build-number=0

      - store_artifacts:
          path: build/app/outputs/apk/release/app-release.apk
      
      - run: cd android && fastlane $FASTLANE_LANE

  # upload_app_center:
  #   macos:
  #     xcode: "11.3"
  #   working_directory: /Users/distiller/project
  #   environment:
  #     FL_OUTPUT_DIR: output
  #     FASTLANE_LANE: upload_app_center
  #   shell: /bin/bash --login -o pipefail
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         key: 1-gems-{{ checksum "Gemfile.lock" }}
  #     - run: bundle check || bundle install --path vendor/bundle
  #     - save_cache:
  #         key: 1-gems-{{ checksum "Gemfile.lock" }}
  #         paths:
  #           - vendor/bundle
  #     - run:
  #         name: fastlane
  #         command: bundle exec fastlane $FASTLANE_LANE

workflows:
  version: 2
  build_and_test:
    jobs:
      - test_app
      - build_app_android:
          filters:
            branches:
              only: master
          requires:
            - test_app
      # - upload_app_center:
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #       - test_app
      #       - build_app_android